function n(i){return typeof i=="object"&&"field"in i&&"message"in i}async function o(i,t={}){try{const e=await fetch(i,t);if(!e.ok){const s=await e.json();throw Array.isArray(s)&&s.every(a=>n(a))?s:n(s)?[s]:[{field:"unknown",message:"Unknown error"}]}return e.status===200?await e.json():void 0}catch(e){throw e instanceof TypeError?[{field:"network",message:"Could not connect to service."}]:e instanceof SyntaxError?[{field:"internal",message:"Failed to parse the response body. The response may be empty or the route may not be returning JSON as expected."}]:e}}class l{constructor(t){this.apiUrl=t}async getAll(){return(await o(`${this.apiUrl}`)).map(s=>({...s,startDate:new Date(s.startDate),endDate:new Date(s.endDate)}))}async insert(t){const e={method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(t)};await o(`${this.apiUrl}`,e)}async update(t,e){const s={method:"PUT",headers:{"Content-Type":"application/json"},body:JSON.stringify(e)};await o(`${this.apiUrl}/${t}`,s)}async delete(t){const e={method:"DELETE"};await o(`${this.apiUrl}/${t}`,e)}}function r(i,t){const e=i.querySelector(".error");e&&e.remove();const s=document.createElement("p");s.setAttribute("class","error"),s.innerText=t,i.insertBefore(s,i.firstChild)}function c(i,t){console.error(`${t.field}: ${t.message}`),t.field==="network"?r(i,"Could not connect to service :("):t.field==="internal"&&r(i,"Something went wrong when trying to use the service :(")}class d{constructor(t){this.button=t}showLoader(){this.button.classList.add("loading")}hideLoader(){this.button.classList.remove("loading")}enable(){this.button.disabled=!1,this.updateAriaDisabled()}disable(){this.button.disabled=!0,this.updateAriaDisabled()}updateAriaDisabled(){this.button.setAttribute("aria-disabled",this.button.disabled.toString())}}export{d as B,l as W,r as d,c as h,n as i};
