function r(s){return typeof s=="object"&&"field"in s&&"message"in s}async function o(s,t={}){try{const e=await fetch(s,t);if(!e.ok){const i=await e.json();throw Array.isArray(i)&&i.every(a=>r(a))?i:r(i)?[i]:[{field:"unknown",message:"Unknown error"}]}return e.status===200?await e.json():void 0}catch(e){throw e instanceof TypeError?[{field:"network",message:"Could not connect to service."}]:e instanceof SyntaxError?[{field:"internal",message:"Failed to parse the response body. The response may be empty or the route may not be returning JSON as expected."}]:e}}class l{constructor(t){this.apiUrl=t}async getAll(){return await o(`${this.apiUrl}`)}async insert(t){const e={method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(t)};await o(`${this.apiUrl}`,e)}async update(t,e){const i={method:"PUT",headers:{"Content-Type":"application/json"},body:JSON.stringify(e)};await o(`${this.apiUrl}/${t}`,i)}async delete(t){const e={method:"DELETE"};await o(`${this.apiUrl}/${t}`,e)}}function n(s,t){const e=s.querySelector(".error");e&&e.remove();const i=document.createElement("p");i.setAttribute("class","error"),i.innerText=t,s.insertBefore(i,s.firstChild)}function c(s,t){console.error(`${t.field}: ${t.message}`),t.field==="network"?n(s,"Could not connect to service :("):t.field==="internal"&&n(s,"Something went wrong when trying to use the service :(")}class d{constructor(t){this.button=t}showLoader(){this.button.classList.add("loading")}hideLoader(){this.button.classList.remove("loading")}enable(){this.button.disabled=!1,this.updateAriaDisabled()}disable(){this.button.disabled=!0,this.updateAriaDisabled()}updateAriaDisabled(){this.button.setAttribute("aria-disabled",this.button.disabled.toString())}}export{d as B,l as W,n as d,c as h,r as i};
